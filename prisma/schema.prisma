// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ================================= MODEL USER =================================
model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  password String
  name     String
  email    String? @unique
  phone    String?
  nik      String?
  imagePath String?
  role     String
  isActive Boolean @default(true)
  createdAt DateTime @default(now())

  histories UserHistory[] @relation("UserHistories")
  token     UserToken[]   @relation("UserLoginManagement")

  // Relasi ke toko tempat dia bekerja
  shopId Int?
  shop   Shop? @relation("UserWorkplace", fields: [shopId], references: [id])

  // Relasi ke toko-toko yang dia kelola (sebagai admin)
  shopsManaged Shop[] @relation("ShopAdmin")

  // Relasi sebagai pencatat gudang
  stockIns  StockIn[]  @relation("UserStockInCreatedBy")
  stockOuts StockOut[] @relation("UserStockOutCreatedBy")

  Transaction Transaction[] @relation("WhoIsServing")
}

model UserHistory{
  id Int @id @default(autoincrement())
  description String
  userId Int
  user User @relation("UserHistories", fields: [userId], references: [id])
  updatedAt DateTime @default(now())
}

model UserToken {
  id         Int   @id @default(autoincrement())
  user       User     @relation("UserLoginManagement", fields: [userId], references: [id])
  userId     Int
  token      String   @unique
  lastActive DateTime
  expiresIn  Int      // dalam detik
  createdAt  DateTime @default(now())
}

// ================================= MODEL GUDANG =================================
model Product {
  id            Int               @id @default(autoincrement())
  name          String
  buyPrice      Decimal
  sellPrice     Decimal
  imagePath     String?
  barcode       String
  isActive      Boolean           @default(true)
  distributor   Distributor?       @relation("DistributedBy", fields: [distributorId], references: [id])
  distributorId Int?
  type          Type              @relation("ProductTypeOf", fields: [typeId], references: [id])
  typeId        Int
  histories     ProductHistory[] @relation("ProductHistories")
  stockInDetails  StockInDetail[] @relation("WhatProductStockedIn")
  stockOutDetails StockOutDetail[] @relation("WhatProductStockedOut")

  transactionDetail TransactionDetail[] @relation("WhatProductSold")

  ShopProduct ShopProduct[]
}

model ShopProduct {
  id        Int     @id @default(autoincrement())
  shopId    Int
  productId Int
  stock     Int     @default(0)

  shop      Shop    @relation(fields: [shopId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([shopId, productId]) // kombinasi unik
}

model Shop {
  id Int @id @default(autoincrement())
  name String
  address String

  // Staff yang bekerja di toko ini
  users User[] @relation("UserWorkplace")

  // Admin dari toko ini
  adminId Int?
  admin User? @relation("ShopAdmin", fields: [adminId], references: [id])

  ShopProduct ShopProduct[]

  Distributor Distributor[] @relation("DistributorServeShop")
}

model ProductHistory {
  id         Int      @id @default(autoincrement())
  description String
  updatedAt   DateTime @default(now())
  product     Product  @relation("ProductHistories", fields: [productId], references: [id])
  productId   Int
}

model Distributor {
  id            Int                  @id @default(autoincrement())
  name          String
  phone         String?
  email         String?
  ecommerceLink String?
  imagePath     String?
  address       String?
  shopId Int?
  shop Shop? @relation("DistributorServeShop", fields: [shopId], references: [id])
  isActive      Boolean              @default(true)
  products      Product[] @relation("DistributedBy")
  histories     DistributorHistory[] @relation("DistributorHistories")
  stockIns      StockIn[] @relation("StockInBy")
}

model DistributorHistory {
  id           Int         @id @default(autoincrement())
  description  String
  updatedAt    DateTime    @default(now())
  distributor  Distributor @relation("DistributorHistories", fields: [distributorId], references: [id])
  distributorId Int
}

model Type {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[] @relation("ProductTypeOf")
}

model StockIn {
  id             Int             @id @default(autoincrement())
  invoice        String
  createdAt      DateTime        @default(now())
  reason         String
  totalAmount    Int
  createdBy      Int
  user  User            @relation("UserStockInCreatedBy", fields: [createdBy], references: [id])
  distributorId  Int?
  distributor    Distributor?    @relation("StockInBy", fields: [distributorId], references: [id])
  sourceShopId   Int?
  stockInDetails StockInDetail[] @relation("StockInDetails")
}

model StockInDetail {
  id         Int      @id @default(autoincrement())
  product    Product  @relation("WhatProductStockedIn", fields: [productId], references: [id])
  productId  Int
  stockIn    StockIn  @relation("StockInDetails", fields: [stockInId], references: [id])
  stockInId  Int
  quantity      Int
  subtotal   Int
}

model StockOut {
  id              Int              @id @default(autoincrement())
  invoice         String
  createdAt       DateTime         @default(now())
  reason          String
  totalAmount     Int
  createdBy       Int
  user   User             @relation("UserStockOutCreatedBy", fields: [createdBy], references: [id])
  targetShopId    Int?
  transactionId   Int?
  stockOutDetails StockOutDetail[] @relation("StockOutDetails")
}

model StockOutDetail {
  id          Int       @id @default(autoincrement())
  product     Product   @relation("WhatProductStockedOut", fields: [productId], references: [id])
  productId   Int
  stockOut    StockOut  @relation("StockOutDetails", fields: [stockOutId], references: [id])
  stockOutId  Int
  quantity       Int
  subtotal    Decimal
}

// ================================= MODEL KASIR =================================
model Transaction {
  id           Int       @id @default(autoincrement())
  invoice      String
  createdAt    DateTime  @default(now())
  customerId   Int?
  customer     Customer?  @relation("WhoTakesCredit", fields: [customerId], references: [id])
  totalAmount  Decimal
  paidAmount   Decimal   @default(0) // jumlah yang sudah dibayar
  status       String    // unpaid, partial, paid, refund
  payment      String    // cash, transfer, qris, credit
  createdBy    Int
  staff        User      @relation("WhoIsServing", fields: [createdBy], references: [id])
  discountId   Int?
  discount     Discount? @relation("WhatTransactionDiscount", fields: [discountId], references: [id])
  
  details      TransactionDetail[] @relation("TransactionDetails")
  installments Installment[]       @relation("TransactionInstallments")
}

model Installment {
  id             Int         @id @default(autoincrement())
  transactionId  Int
  transaction    Transaction @relation("TransactionInstallments", fields: [transactionId], references: [id])
  amountPaid     Decimal
  paidAt         DateTime    @default(now())
  method         String      // cash, transfer, qris
  note           String?
}

model TransactionDetail{
  id Int @id @default(autoincrement())
  productId Int
  product Product @relation("WhatProductSold", fields: [productId], references: [id])
  transactionId Int 
  transaction Transaction @relation("TransactionDetails", fields: [transactionId], references: [id])
  quantity Int
  subtotal Decimal
  discountId Int?
  discount Discount? @relation("WhatProductDiscount", fields: [discountId], references: [id])
}

model Customer{
  id Int @id @default(autoincrement())
  name String
  nik String
  imagePath String
  address String
  phone String

  Transaction Transaction[] @relation("WhoTakesCredit")
}

model Discount {
  id Int @id @default(autoincrement())
  name String
  percentDiscount Decimal
  type String // hanya produk atau keseluruhan transaksi
  startAt DateTime?
  endAt DateTime?

  Transaction Transaction[] @relation("WhatTransactionDiscount")

  transactionDetail TransactionDetail[] @relation("WhatProductDiscount")
}