// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  password String
  name String
  email String? @unique
  phone String?
  nik String?
  photoPath String?
  role String
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  histories UserHistory[] @relation("UserHistories")
  token UserToken[] @relation("UserLoginManagement")

  // Relasi ke toko tempat dia bekerja
  shopId Int?
  shop Shop? @relation("UserWorkplace", fields: [shopId], references: [id])

  // Relasi ke toko-toko yang dia kelola (sebagai admin)
  shopsManaged Shop[] @relation("ShopAdmin")
}

model Shop {
  id Int @id @default(autoincrement())
  name String
  address String

  // Staff yang bekerja di toko ini
  users User[] @relation("UserWorkplace")

  // Admin dari toko ini
  adminId Int?
  admin User? @relation("ShopAdmin", fields: [adminId], references: [id])
}

model UserHistory{
  id Int @id @default(autoincrement())
  description String
  userId Int
  user User @relation("UserHistories", fields: [userId], references: [id])
  updatedAt DateTime @default(now())
}

model UserToken {
  id         Int   @id @default(autoincrement())
  user       User     @relation("UserLoginManagement", fields: [userId], references: [id])
  userId     Int
  token      String   @unique
  lastActive DateTime
  expiresIn  Int      // dalam detik
  createdAt  DateTime @default(now())
}
